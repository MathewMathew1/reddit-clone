// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

enum VoteType {
    UP
    DOWN
}

datasource db {
    provider = "mysql"
    url = env("DATABASE_URL")
    relationMode = "prisma"
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model Community {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    posts     Post[]
    creator User     @relation(fields: [creatorId], references: [id])
    creatorId       String
    subscribers Subscription[]

    @@index([name])
    @@index([creatorId])
}

model Post {
    id          String    @id @default(cuid())
    title       String
    description     String
    imageLink     String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String
    community   Community @relation(fields: [communityId], references: [id])
    communityId String
    comments    Comment[] 
    votes       Vote[]

    @@index([authorId])
    @@index([communityId])
}

model Subscription {
    community Community  @relation(fields: [communityId], references: [id])
    communityId String
    subscriber     User      @relation(fields: [subscriberId], references: [id])
    subscriberId  String

    @@id([subscriberId , communityId])
    @@index([communityId])
    @@index([subscriberId])
}

model Comment {
    id String @id @default(uuid())
    content String
    author      User      @relation(fields: [authorId], references: [id])
    authorId    String
    post  Post @relation(fields: [postId], references: [id])
    postId String
    votes     CommentVote[]

    @@index([postId])
    @@index([authorId])
}

model Vote {
    user   User     @relation(fields: [userId], references: [id])
    userId String
    post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String
    type   VoteType

    @@id([userId, postId])
    @@index([userId])
    @@index([postId])
}

model CommentVote {
    user   User     @relation(fields: [userId], references: [id])
    userId String
    comment   Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    type   VoteType

    @@id([userId, commentId])
    @@index([commentId])
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username String? @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    comment     Comment[]
    commentVote CommentVote[]
    createdCommunities Community[] 
    post        Post[]
    votes Vote[]
    subscription Subscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
